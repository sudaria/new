import React, {Component} from 'react'
import {connect} from 'react-redux'
import R from 'ramda'
import {Link} from 'react-router'
//import mockPhones from '../api'


import { Pagination, PaginationItem, PaginationLink } from 'reactstrap';

import {
  fetchPhones,
  addPhoneToBasket,
  fetchCategories,
  activePage
} from 'actions'
import {getPhones} from 'selectors'

class PaginationClass extends Component {
  constructor(props) {
    super(props);
    this.state = {
      activePage: this.props.activePage,
      itemsCount: this.props.itemsCount,
      itemsOnPage: this.props.itemsOnPage
    };

    this.handlePageChange = this.handlePageChange.bind(this);
    this.renderPages = this.renderPages.bind(this);
  }
 

  handlePageChange(evt) {
    let activePage = this.state.activePage;
    const page = evt.currentTarget.dataset.page;
    const parsedPage = parseInt(page);
    if (!isNaN(parsedPage)) {
      activePage = parsedPage;
    } else {
      activePage = page === 'next' ? activePage + 1 : activePage - 1;
    }
    this.props.onChange(activePage);
    this.setState({activePage});
  }

  renderPages() {
    const {itemsCount, itemsOnPage} = this.state;
    let pages = [];
    const paginationCount = Math.ceil(itemsCount/itemsOnPage);
    console.log(paginationCount, typeof paginationCount, 'paginationCount', itemsCount, itemsOnPage)

    for (let i = 0; i < paginationCount; i++) {
      pages.push(<PaginationItem>
        <PaginationLink data-page={i + 1} onClick={this.handlePageChange}>
          {i + 1}
        </PaginationLink>
      </PaginationItem>)
    }
    return pages;
  }

  render() {
    return (  
      <Pagination>
        <PaginationItem>
          <PaginationLink previous data-page={'prev'} onClick={this.handlePageChange} />
        </PaginationItem>
        {this.renderPages()}
        <PaginationItem>
          <PaginationLink next data-page={'next'} onClick={this.handlePageChange}/>
        </PaginationItem>
      </Pagination>
    );
  }
}
 

class Phones extends Component {
  constructor(props) {
    super(props);

    this.state = {
      activePage: 0,
    }
  }
  componentDidMount () {
    this.props.fetchPhones()
    this.props.fetchCategories()
    this.props.activePage()
  }

  onPaginationChange(pageNumber) {

  }

  renderPhone (phone, index) {
    const {addPhoneToBasket} = this.props
    const shortDescription = `${R.take(60, phone.description)}...`
   

    return (
      <div className='col-sm-4 col-lg-4 col-md-4 book-list' key={index}>
        <div className='thumbnail'>
           <img
           className='img-thumbnail'
            src={phone.image}
            alt={phone.name}
          />
          <div className='caption'>
            <h4 className='pull-right'>${phone.price}</h4>
            <h4>
              <Link to={`/phones/${phone.id}`}>
                {phone.name}
              </Link>
            </h4>
            <p>{shortDescription}</p>
            <p className='itemButton'>
              <button
                className='btn btn-primary'
                onClick={() => addPhoneToBasket(phone.id)}
              >
                Buy Now!
              </button>
              <Link
                to={`/phones/${phone.id}`}
                className='btn btn-default'
              >
                More info
              </Link>
            </p>
          </div>
        </div>
      </div>
    )
  }


  render () {
    const {phones, activePage} = this.props
    console.log(activePage, 'activePage')
     const test = phones.slice(this.state.activePage, 5)

    console.log(this.props, 'this.props')

    return (
      <div>
        <div className='books row'>
          {test.map((phone, index) => this.renderPhone(phone, index))}
        </div>
        <div className='row'>
          <div className='col-md-12'>
                      </div>
        </div>
        {phones.length && <PaginationClass itemsCount={phones.length} 
                              itemsOnPage={5}
                              activePage={this.state.activePage}
                              onChange={(activePage) => {
                                console.log(this.props.activePage, 'this.props.activePage')
                                this.props.activePage(activePage);
                                
                                this.setState({activePage: this.state.activePage})
        }}/>}
      </div>

    )
  }
}

const mapStateToProps = (state, ownProps) => {
  return {
    phones: getPhones(state, ownProps),
  }
}

const mapDispatchToProps = {
  fetchPhones,
  activePage,
  addPhoneToBasket,
  fetchCategories
}

export default connect(mapStateToProps, mapDispatchToProps)(Phones)
